# -*- coding: utf-8 -*-
"""Task 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHKFsZ1kmtFgYVNpFQmntqOHW-xJPtka
"""

!pip install pandas

!pip install numpy

!pip install matplotlib

!pip install seaborn

!pip install scikit-learn

!pip install xgboost

import pandas as pd

# Load the dataset
df = pd.read_csv('Titanic-Dataset.csv')  # Update with your file path

# Display the first few rows of the dataset
print(df.head())

# Get information about the dataset
print(df.info())

# Check for missing values
print(df.isnull().sum())

# Example: Fill missing age values with the median
df['Age'].fillna(df['Age'].median(), inplace=True)

# Drop rows with missing 'Embarked' values
df.dropna(subset=['Embarked'], inplace=True)

df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)

features = ['Pclass', 'Age', 'Fare', 'Sex_male', 'Embarked_Q', 'Embarked_S']
X = df[features]
y = df['Survived']  # The target variable

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

# Create a logistic regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

df['FamilySize'] = df['SibSp'] + df['Parch'] + 1  # +1 to include the passenger themselves

df['AgeGroup'] = pd.cut(df['Age'], bins=[0, 12, 18, 35, 60, 120], labels=['Child', 'Teen', 'YoungAdult', 'Adult', 'Senior'])
df = pd.get_dummies(df, columns=['AgeGroup'], drop_first=True)

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
rf_y_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_y_pred)
print(f'Random Forest Accuracy: {rf_accuracy:.2f}')

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
}
grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)
print("Best parameters found: ", grid_search.best_params_)

from sklearn.model_selection import cross_val_score

scores = cross_val_score(RandomForestClassifier(), X, y, cv=5)
print(f'Cross-validation accuracy: {scores.mean():.2f} Â± {scores.std():.2f}')

importances = rf_model.feature_importances_
feature_names = X.columns
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
print(feature_importance_df.sort_values(by='Importance', ascending=False))

import joblib
joblib.dump(rf_model, 'titanic_model.pkl')  # Save model to file